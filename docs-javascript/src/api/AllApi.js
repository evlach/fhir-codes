/**
 * FHIR Codes API
 * FHIR Codes API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: evlach@fit.fraunhofer.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Concept', 'model/ValueSet'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Concept'), require('../model/ValueSet'));
  } else {
    // Browser globals (root is window)
    if (!root.FhirCodesApi) {
      root.FhirCodesApi = {};
    }
    root.FhirCodesApi.AllApi = factory(root.FhirCodesApi.ApiClient, root.FhirCodesApi.Concept, root.FhirCodesApi.ValueSet);
  }
}(this, function(ApiClient, Concept, ValueSet) {
  'use strict';

  /**
   * All service.
   * @module api/AllApi
   * @version 1.0.0
   */

  /**
   * Constructs a new AllApi. 
   * @alias module:api/AllApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCodeToValueSet operation.
     * @callback module:api/AllApi~addCodeToValueSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Concept} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * insert a code to the valueset
     * 
     * @param {String} url ID of pet to update
     * @param {module:model/Concept} concept user to add to the system
     * @param {module:api/AllApi~addCodeToValueSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Concept}
     */
    this.addCodeToValueSet = function(url, concept, callback) {
      var postBody = concept;

      // verify the required parameter 'url' is set
      if (url == undefined || url == null) {
        throw new Error("Missing the required parameter 'url' when calling addCodeToValueSet");
      }

      // verify the required parameter 'concept' is set
      if (concept == undefined || concept == null) {
        throw new Error("Missing the required parameter 'concept' when calling addCodeToValueSet");
      }


      var pathParams = {
        'url': url
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Concept;

      return this.apiClient.callApi(
        '/valueset/{url}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getValueSet operation.
     * @callback module:api/AllApi~getValueSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get valueset
     * Get valueset by id 
     * @param {String} url url of valueset
     * @param {module:api/AllApi~getValueSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getValueSet = function(url, callback) {
      var postBody = null;

      // verify the required parameter 'url' is set
      if (url == undefined || url == null) {
        throw new Error("Missing the required parameter 'url' when calling getValueSet");
      }


      var pathParams = {
        'url': url
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/valueset/{url}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getValueSetCode operation.
     * @callback module:api/AllApi~getValueSetCodeCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get code from valueset
     * Get concept 
     * @param {String} url url of valueset
     * @param {String} code url of valueset
     * @param {Object} opts Optional parameters
     * @param {String} opts.lang language
     * @param {module:api/AllApi~getValueSetCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getValueSetCode = function(url, code, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'url' is set
      if (url == undefined || url == null) {
        throw new Error("Missing the required parameter 'url' when calling getValueSetCode");
      }

      // verify the required parameter 'code' is set
      if (code == undefined || code == null) {
        throw new Error("Missing the required parameter 'code' when calling getValueSetCode");
      }


      var pathParams = {
        'url': url,
        'code': code
      };
      var queryParams = {
        'lang': opts['lang']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/valueset/{url}/concept/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getValueSetsList operation.
     * @callback module:api/AllApi~getValueSetsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ValueSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get list of all valuesets (list of urls)
     * Get the full list of valuesets 
     * @param {module:api/AllApi~getValueSetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ValueSet>}
     */
    this.getValueSetsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [ValueSet];

      return this.apiClient.callApi(
        '/valuesets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCodeToValueSet operation.
     * @callback module:api/AllApi~updateCodeToValueSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Concept} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update a code to the valueset
     * 
     * @param {String} url ID of pet to update
     * @param {module:model/Concept} concept user to add to the system
     * @param {module:api/AllApi~updateCodeToValueSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Concept}
     */
    this.updateCodeToValueSet = function(url, concept, callback) {
      var postBody = concept;

      // verify the required parameter 'url' is set
      if (url == undefined || url == null) {
        throw new Error("Missing the required parameter 'url' when calling updateCodeToValueSet");
      }

      // verify the required parameter 'concept' is set
      if (concept == undefined || concept == null) {
        throw new Error("Missing the required parameter 'concept' when calling updateCodeToValueSet");
      }


      var pathParams = {
        'url': url
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Concept;

      return this.apiClient.callApi(
        '/valueset/{url}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
